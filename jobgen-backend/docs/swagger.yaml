basePath: /api/v1
definitions:
  controllers.ChangePasswordRequest:
    properties:
      new_password:
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  controllers.ErrorInfo:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  controllers.RegisterRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      experience_years:
        type: integer
      full_name:
        minLength: 1
        type: string
      location:
        type: string
      password:
        minLength: 8
        type: string
      phone_number:
        type: string
      skills:
        items:
          type: string
        type: array
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  controllers.RequestPasswordResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  controllers.ResendOTPRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  controllers.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  controllers.StandardResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/controllers.ErrorInfo'
      message:
        type: string
      success:
        type: boolean
    type: object
  controllers.UpdateProfileRequest:
    properties:
      bio:
        type: string
      experience_years:
        type: integer
      full_name:
        type: string
      location:
        type: string
      phone_number:
        type: string
      profile_picture:
        type: string
      skills:
        items:
          type: string
        type: array
    type: object
  controllers.UpdateUserRoleRequest:
    properties:
      role:
        allOf:
        - $ref: '#/definitions/domain.Role'
        enum:
        - user
        - admin
    required:
    - role
    type: object
  controllers.VerifyEmailRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  domain.Role:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
host: localhost:8080
info:
  contact:
    email: support@jobgen.io
    name: JobGen Support
    url: http://www.jobgen.io/support
  description: AI-Powered Remote Job Finder & CV Optimizer API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: JobGen API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of users (admin only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by role
        enum:
        - user
        - admin
        in: query
        name: role
        type: string
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      - description: Search in email, username, or full name
        in: query
        name: search
        type: string
      - default: created_at
        description: Sort field
        in: query
        name: sort_by
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      security:
      - BearerAuth: []
      summary: Get users
      tags:
      - Admin
  /admin/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Admin
  /admin/users/{user_id}/role:
    put:
      consumes:
      - application/json
      description: Update the role of a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Role update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User role updated successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      security:
      - BearerAuth: []
      summary: Update user role
      tags:
      - Admin
  /admin/users/{user_id}/toggle-status:
    put:
      consumes:
      - application/json
      description: Activate or deactivate a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User status toggled successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      security:
      - BearerAuth: []
      summary: Toggle user status
      tags:
      - Admin
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change the user's password while logged in
      parameters:
      - description: Password change details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - Authentication
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request a password reset link to be sent to the user's email
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RequestPasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset requested
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      summary: Request password reset
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with tokens
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      summary: Login user
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout the current user and invalidate all tokens
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the access token using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with email verification
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      summary: Register a new user
      tags:
      - Authentication
  /auth/resend-otp:
    post:
      consumes:
      - application/json
      description: Resend the OTP verification code to the user's email
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ResendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP resent successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      summary: Resend OTP
      tags:
      - Authentication
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset the user's password using the token from the password reset
        email
      parameters:
      - description: Password reset details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      summary: Reset password
      tags:
      - Authentication
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: Verify user email with OTP code
      parameters:
      - description: Verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request or invalid OTP
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      summary: Verify email address
      tags:
      - Authentication
  /users/account:
    delete:
      consumes:
      - application/json
      description: Delete the user's account permanently
      produces:
      - application/json
      responses:
        "200":
          description: Account deleted successfully
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      security:
      - BearerAuth: []
      summary: Delete account
      tags:
      - User Profile
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User Profile
    put:
      consumes:
      - application/json
      description: Update current user's profile information
      parameters:
      - description: Profile updates
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user profile
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.StandardResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User Profile
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
